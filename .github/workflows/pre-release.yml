name: Pre-release

on:
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Pre-release suffix (e.g., alpha, beta, rc)'
        required: false
        default: 'dev'

jobs:
  pre-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Spectral CLI
        run: npm install -g @stoplight/spectral-cli

      - name: Install Redocly CLI
        run: npm install -g @redocly/cli@latest

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: |
          uv run --package jentic-openapi-parser pytest packages/jentic-openapi-parser/tests -v
          uv run --package jentic-openapi-transformer pytest packages/jentic-openapi-transformer/tests -v
          uv run --package jentic-openapi-validator pytest packages/jentic-openapi-validator/tests -v
          uv run --package jentic-openapi-validator-spectral pytest packages/jentic-openapi-validator-spectral/tests -v
          uv run --package jentic-openapi-bundler-redocly pytest packages/jentic-openapi-bundler-redocly/tests -v

      - name: Get next version for pre-release
        id: next_version
        run: |
          # Get what the next version would be
          NEXT_VERSION=$(uv run semantic-release --dry-run version --print 2>/dev/null || echo "0.1.0")
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          PRE_VERSION="${NEXT_VERSION}.${{ github.event.inputs.version_suffix }}.${TIMESTAMP}"
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT

      - name: Build packages
        run: |
          uv build --package jentic-openapi-parser
          uv build --package jentic-openapi-transformer
          uv build --package jentic-openapi-validator
          uv build --package jentic-openapi-validator-spectral
          uv build --package jentic-openapi-bundler-redocly

      - name: Create pre-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ steps.next_version.outputs.pre_version }}" \
            --title "Pre-release v${{ steps.next_version.outputs.pre_version }}" \
            --notes "Development pre-release built from commit ${{ github.sha }}" \
            --prerelease \
            dist/*.whl dist/*.tar.gz

      - name: Publish to Test PyPI (Optional)
        if: false  # Enable if you want to publish pre-releases to Test PyPI
        env:
          UV_PUBLISH_URL: https://test.pypi.org/legacy/
          UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          uv publish --package jentic-openapi-parser
          uv publish --package jentic-openapi-transformer
          uv publish --package jentic-openapi-validator
          uv publish --package jentic-openapi-validator-spectral
          uv publish --package jentic-openapi-bundler-redocly